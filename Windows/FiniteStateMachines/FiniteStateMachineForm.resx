<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAMMOAADDDgAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAKFg6AI7/9QAwcUoIMndNFzJ2TBIwbEgDMXJKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADN7UAAzek8LNYJUYTmMWrc7kl7WO5FdzzeIV5o0f1I1OWxNATh8UwAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAA0flEAM3lODDeHVpM/m2T5Ralt/0escP9Hq2//RKVr/zuSXuA1gVNMMYdTADqC
        VwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAPIRZADSHVQA1g1RlP5xk+ketcP9HrXD/R61w/0etcP9HrnD/Rapu/zqP
        XNI0fFAfNYBTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        U1o5e084jlg0fZhXM4KSVTJKkVUyIZJXNQeRVTMAAAAAAAAAAAAAAAAAAAAAAAAAAACQVjUAYkQwAZdX
        M36iXDbehl04iEV3TFc0glNdNIBSSDN6ThgwVD0AMnFKAAAAAAAAAAAAVZJvADN9UAA0fFAWN4ZWjz2V
        YOdAnmb9QZ9m/j6XYe44iFimMH9SJDh8TgANt5YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB9XDgAhVc1FFFySHw6j1zMP5tk90GgZ/8/m2T4Oo9czzWCVFg3eFEDN35TAAAAAAA2gFMANHlPCzeI
        V6BBoGf/R61w/0eucf9HrnH/R61w/0Okav85jFq+M3xQGjR/UgAAAAAAAAAAAAAAAACPUi8Aj1IvDo5S
        LyqBSikBc187AC+FUwA0glNRPJZh6kaqbv9HrnH/R65w/0eucf9Gqm7/PZZh7zWCU1YyhlQAPYVZADSC
        UgA1gVNRP5tj90eucP9HrXD/R61w/0etcP9HrXD/R65w/0GgZ/82hVV2oUYnC4tPLiSJTi0kiU4tJIlO
        LSKLTy49kVMwvpBTMERndEkAM3lPEjqOW8VFqm3/R61w/0etcP9HrXD/R61w/0etcP9Gqm7/Oo9cyjR6
        TxU3gVQAQdqBADeIV5REpmv/R61w/0etcP9HrXD/R61w/0etcP9HrXD/Rapu/zeOXLaIVTJdol025Kli
        OeWpYjnlqWI55ahiOeiuZTv9pWA43JZRLkEzflE7Pplj8keucP9HrXD/R61w/0etcP9HrXD/R61w/0eu
        cP8/mmP0NH9RQDSAUgArTzkDOItZp0Wpbf9HrXD/R61w/0etcP9HrXD/R61w/0etcP9Gq2//OZFdxoVY
        NG20aD3+w3FD/8JxQ//CcUP/wnFD/8RyRP+4az//mFUxpT57T1RAnWX5R65x/0etcP9HrXD/R61w/0et
        cP9HrXD/R65x/0CeZvs1gFNQNIBSADmhYwA3h1eLQ6Vq/0eucP9HrXD/R61w/0etcP9HrXD/R61w/0Wp
        bf83jVquiVUxUJ1bNcmjXjfKo143yqNeN8qiXTfQp2A4+aBcNseVTiwpMn5SMz6YYu5HrXD/R61w/0et
        cP9HrXD/R61w/0etcP9HrnD/Ppli8TR+UTk0f1IANIFSADR/UkI+l2HwR61w/0etcP9HrXD/R61w/0et
        cP9HrnD/QJ1l+zWDVGT/DAAChEsrDoBJKQ6ASSkOfkgoDIpPLSmPUi+mjlEuLXNjPAAzd00MOYtZtUSn
        bP9HrnD/R61w/0etcP9HrXD/R65w/0SobP85jFq6M3hODjeBVAA3gVQANXdOBTaFVYQ/m2T5Rqtu/0eu
        cP9HrnD/R6xv/0GfZ/44iFijNHpPDzZ/UgAAAAAAAAAAAAAAAACPUi8Aj1IvCY9SLxiVVjIAbGVBADOA
        UgA0f1I7O5Fd3ESma/9HrXD/R65w/0etcP9Ep2z/O5Fe3zV/Uj8zgVIAQIZbAAAAAAA0fVEAM3pPCjaD
        VGs6kFzOPphi7z6ZYvE7kl3XN4VWgDR8UBQ0flEAN3xSAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAANHtQAELUgQA1f1I3OIpZrD2VYOc/mmPzPZZg5ziLWa81f1I6RUI+ADh+UwAAAAAAAAAAAAAA
        AAAzbkoANGVGATN5ThQzfVAzM31QNjJ5Thoyb0kCMnJLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAMWhGADN6TwAydUwIM3tPJzR+UTkze08oMnVMCTF+TwA2UUAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////////////D////AP///gD///4Af//8AH///AB///wAf//8AH///g
        B///wA///8AB//+Bwf//g4H//gOB//4HgP/+D+B//gfwf+AH8A/AP/gDgB8YA4AAEAGAAAABAAAAAYAA
        AAGAABABgB84A8A//Afgf/4P//////////8=
</value>
  </data>
</root>